# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("DESeq2")

library("DESeq2")
library("EnhancedVolcano")
library("ggplot2")
library("limma")
library("biomaRt")
library("calibrate")
library("edgeR")
library("gridExtra")
#dir <- "C:/Users/User/Documents/HUJI/????/Parkinson/new_analysis_290320/blood140520/3Groups_120520" # choose working folder
dir <- "C:/Users/Shani Vaknine/Documents/R/new_PD_analysis_290320/Blood/3Groups_140520_indFilt" 
setwd(dir)

#colData <- read.csv("C:/Users/Shani Vaknine/Documents/R/new_PD_analysis_290320/Blood/4GroupsAnalysis/malePdataBlood010420_plusFactors.csv",header = T, sep = ',') #reads in patints data file (Patients_Traits) 
colData <- read.csv("malePdataBlood130520_plusFactors.csv",header = T, sep = ',')
colData <- colData[, -c(20:27)]
#create a data set from HTSeq files
directory <- "C:/Users/Shani Vaknine/Documents/R/new_PD_analysis_290320/Blood/3Groups_140520_indFilt/HTSeq_ensembl100_Male31" # choose HTSeq_files folder
#directory <- "C:/Users/User/Documents/HUJI/????/Parkinson/new_analysis_290320/blood140520/3Groups_120520/HTSeq_ensembl100_Male31"
sampleFiles <- grep('.HTseq.stats',list.files(directory),value=TRUE)

#create new data frame combining HTSeq files and traits factors
sampleTable <- data.frame(sampleName = colData$sample.name, fileName = sampleFiles, Diagnosis = as.factor(colData$diagnosis), 
                          Age = as.factor(colData$age), Braak = as.factor(colData$braak), BraakLB = as.factor(colData$braaklb),
                          Amyloid = as.factor(colData$amyloid), ApoE = as.factor(colData$apoe), PMD = as.factor(colData$pmd.blood),
                          RIN = as.factor(colData$RIN_factor), Duration = as.factor(colData$pd.duration..y.), Sepsis = as.factor(colData$sepsis),
                          Batch = as.factor(colData$batch),HeartFaliure = as.factor(colData$heart.failure), Euthanasia = as.factor(colData$Euthanasia))

# Balance design for clot and batch effects
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = directory,
                                       design = ~ Sepsis + Batch + RIN + Diagnosis) 
ddsHTSeq

#pre filtering of rows with less than 1000 reads average
mean(rowSums(counts(ddsHTSeq))) #11191.24
mean(rowMeans(counts(ddsHTSeq))) #361.0076

#keep <- rowSums(counts(ddsHTSeq)) >= 30 #from DESeq manual
#ddsHTSeq <- ddsHTSeq[keep,]

#specifying the reference level of the Diagnosiss (which one is control)
ddsHTSeq$Diagnosis <- relevel(ddsHTSeq$Diagnosis, ref = "NDC")

#preforming DE analysis
ddsHTSeq <- DESeq(ddsHTSeq)
ddsHTSeq <- ddsHTSeq[which(mcols(ddsHTSeq)$betaConv),] #from: https://support.bioconductor.org/p/65091/
#1128 rows did not converge in beta
#save(ddsHTSeq, file = "ddsHTSeq_blood4Groups_090420.RData") #save dds for future use

#check dispersion to know if data fit Wald test (DESeq2 automatic option)
countsnorm = counts(ddsHTSeq, normalize=T)
dim(countsnorm)
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(ddsHTSeq, main="Dispersion plot")
dev.off()
#Exporting gene count per sample to CSV file
write.csv(as.data.frame(countsnorm), "maleBlood_countsnorm.csv")

resultsNames(ddsHTSeq) # check order of the coefficient, sanity check
#create vector with all desired contrasts
contrastList <- c("DPDvsNDC","NDPDvsNDC","DPDvsNDPD")

#prepare for adding annotations
library( "biomaRt" )
ensembl = useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl",version = "Ensembl Genes 100", host = "uswest.ensembl.org")
#listAttributes(ensembl)
#listEnsembl()

#some times doesn't work because the server is full, so switch host (^) and try again.
genemap1 <- getBM(attributes = c("ensembl_gene_id","ensembl_gene_id_version","entrezgene_id","external_gene_name",
                                 "gene_biotype","description","chromosome_name","start_position","end_position"),
                  filters = "ensembl_gene_id",
                  values = rownames(countsnorm),
                  mart = ensembl)

idx_counts <- match(rownames(countsnorm), genemap1$ensembl_gene_id )
countsnorm_DF <- as.data.frame(countsnorm)
countsnorm_DF$ensembl_gene_id <- genemap1$ensembl_gene_id[idx_counts]
countsnorm_DF$ensembl_gene_id_version <- genemap1$ensembl_gene_id_version[idx_counts]
countsnorm_DF$entrez <- genemap1$entrezgene_id[idx_counts]
countsnorm_DF$external_gene_name <- genemap1$external_gene_name[idx_counts]
countsnorm_DF$rnacentral <- genemap1$rnacentral[idx_counts]
countsnorm_DF$gene_biotype <- genemap1$gene_biotype[idx_counts]
countsnorm_DF$description <- genemap1$description[idx_counts]
countsnorm_DF$chromosome_name <- genemap1$chromosome_name[idx_counts]
countsnorm_DF$start_position <- genemap1$start_position[idx_counts]
countsnorm_DF$end_position <- genemap1$end_position[idx_counts]

write.csv(as.data.frame(countsnorm_DF), "maleBlood_countsnormAnnotated.csv")

##create result objects for all contrasts
for (i in 1:length(contrastList)){
  resName <- paste('res', contrastList[i], sep='_')
  ##create res file
  assign(resName, results(ddsHTSeq, contrast=c("Diagnosis",strsplit(contrastList[i], "vs")[[1]][1],strsplit(contrastList[i], "vs")[[1]][2]), alpha=0.05))
  summary(get(resName))
  # # # graphs for checking stuff from the beginner guide to DESeq2
  # create bins using the quantile function 
  ##ratio of small p.values to mean normalized counts
  qs <- c( 0, quantile(get(resName)$baseMean[get(resName)$baseMean > 0], 0:7/7 ) )
  # "cut" the genes into the bins
  bins <- cut( get(resName)$baseMean, qs )
  # rename the levels of the bins using the middle point
  levels(bins) <- paste0("~",round(.5*qs[-1] + .5*qs[-length(qs)]))
  # calculate the ratio of ?p? values less than .01 for each bin
  ratios <- tapply( get(resName)$pvalue, bins, function(p) mean( p < .01, na.rm=TRUE ) )
  # 
  # # plot these ratios
  png(paste('qc', contrastList[i],'p.valueVSmeancounts.png', sep='_'), 1000, 1000, pointsize=20)
  barplot(ratios, xlab="mean normalized count", ylab="ratio of small $p$ values")
  dev.off()

  ##how much filtering is happening automaticly:
  metadata(get(resName))$filterThreshold  #res_DPDvsNDC 0% 0.6536203

  png(paste('qc', contrastList[i],'filterThreshold.png', sep='_'), 1000, 1000, pointsize=20)
  plot(metadata(get(resName))$filterNumRej,
       type="b", ylab="number of rejections",
       xlab="quantiles of filter")
  lines(metadata(get(resName))$lo.fit, col="red")
  abline(v=metadata(get(resName))$filterTheta)
  dev.off()
  ##Histogram of p values for all tests. The area shaded in blue indicates the subset of
  #those that pass the filtering, the area in khaki those that do not pass:

  use <- get(resName)$baseMean > metadata(get(resName))$filterThreshold
  h1 <- hist(get(resName)$pvalue[!use], breaks=0:50/50, plot=FALSE)
  h2 <- hist(get(resName)$pvalue[use], breaks=0:50/50, plot=FALSE)
  colori <- c(`do not pass`="khaki", `pass`="powderblue")

  png(paste('qc', contrastList[i],'p.valHistogram.png', sep='_'), 1000, 1000, pointsize=20)
  barplot(height = rbind(h1$counts, h2$counts), beside = FALSE,
          col = colori, space = 0, main = "", ylab="frequency")
  text(x = c(0, length(h1$counts)), y = 0, label = paste(c(0,1)),
       adj = c(0.5,1.7), xpd=NA)
  legend("topright", fill=rev(colori), legend=rev(names(colori)))
  dev.off()

  #create ordered file by p.value
  resNameOrdered <- paste(resName, "Ordered", sep='_')
  assign(resNameOrdered, get(resName)[order(get(resName)$padj),])# order results table by the smallest p value
  get(resNameOrdered)[1:10, ] #present 10 most significant genes
  sum(get(resName)$padj < 0.05, na.rm=TRUE) #How many genes were less than 0.05 
  
  png(paste('qc', contrastList[i],'MAaplot.png', sep='_'), 1000, 1000, pointsize=20)
  DESeq2::plotMA(get(resName), ylim=c(-30,30))
  dev.off()
  
  # #add gene symbol,entrez id, etc. from: https://bioc.ism.ac.jp/packages/2.14/bioc/vignettes/DESeq2/inst/doc/beginner.pdf
  res_FullAnnot <- NULL
  res_FullAnnot <- as.data.frame(get(resNameOrdered))
  
  idx2 <- match(rownames(res_FullAnnot), genemap1$ensembl_gene_id)

  res_FullAnnot$ensembl_gene_id <- genemap1$ensembl_gene_id[idx2]
  res_FullAnnot$ensembl_gene_id_version <- genemap1$ensembl_gene_id_version[idx2]
  res_FullAnnot$entrez <- genemap1$entrezgene_id[idx2]
  res_FullAnnot$external_gene_name <- genemap1$external_gene_name[idx2]
  res_FullAnnot$rnacentral <- genemap1$rnacentral[idx2]
  res_FullAnnot$gene_biotype <- genemap1$gene_biotype[idx2]
  res_FullAnnot$description <- genemap1$description[idx2]
  res_FullAnnot$chromosome_name <- genemap1$chromosome_name[idx2]
  res_FullAnnot$start_position <- genemap1$start_position[idx2]
  res_FullAnnot$end_position <- genemap1$end_position[idx2]

  #save res
  write.csv(res_FullAnnot, paste(contrastList[i],'res.csv', sep='_'))

  #creat new dataframe of padj < 0.05
  resNamePadj <- paste("Padj", resNameOrdered, sep='_')
  assign(resNamePadj, as.data.frame(res_FullAnnot[which(res_FullAnnot$padj <= 0.05), ]))
  
  write.csv(get(resNamePadj), paste(contrastList[i],'resPadj.csv', sep='_'))

  ##plot volcanos
  #volc with of all
  # png(paste('volc',contrastList[i],'With.png', sep='_'), 1000, 1000, pointsize=20)
  # with(get(resName), plot(log2FoldChange, -log10(pvalue), pch=20, main=paste('Blood:',strsplit(contrastList[i], "vs")[[1]][1],'vs.',strsplit(contrastList[i], "vs")[[1]][2], sep=' ')))
  # with(subset(get(resName), padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
  # with(subset(get(resName), abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="dark green"))
  # with(subset(get(resName), padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
  # with(subset(get(resName), padj<.05 & abs(log2FoldChange)>1), 
  #      legend("topleft", xjust=1, yjust=1, legend=c("NS", 
  #                                                   paste("FDR<",0.05,sep=""), 
  #                                                   paste("|LogFC|>",1,sep=""), 
  #                                                   "both"), 
  #             pch=16, col=c("dark green", "blue", "red", "black")))
  # dev.off()
  
  #volc with of above10
  res_above10 <- res_FullAnnot[which(res_FullAnnot$baseMean >= 10),]
  res_above5 <- res_FullAnnot[which(res_FullAnnot$baseMean >= 5),]
   png(paste('volc_above10',contrastList[i],'With.png', sep='_'), 1000, 1000, pointsize=20)
   with(res_above10, plot(log2FoldChange, -log10(pvalue), pch=20, main=paste('Blood:',strsplit(contrastList[i], "vs")[[1]][1],'vs.',strsplit(contrastList[i], "vs")[[1]][2], sep=' ')))
   with(subset(res_above10, padj<.05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
   with(subset(res_above10, abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="dark green"))
   with(subset(res_above10, padj<.05 & abs(log2FoldChange)>1), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
   with(subset(res_above10, padj<.05 & abs(log2FoldChange)>1), 
        legend("topleft", xjust=1, yjust=1, legend=c("NS", 
                                                     paste("FDR<",0.05,sep=""), 
                                                     paste("|LogFC|>",1,sep=""), 
                                                     "both"), 
               pch=16, col=c("dark green", "blue", "red", "black")))
   dev.off()
  
  #volc of all ggplot
  ggplot_full<- ggplot(res_FullAnnot, aes(x=log2FoldChange, y=-log10(pvalue))) + 
    geom_point(data = subset(res_FullAnnot, padj > 0.05), color = "black",size = 0.3,shape = 16) +
    geom_point(data = subset(res_FullAnnot, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
    geom_point(data = subset(res_FullAnnot, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
    geom_point(data = subset(res_FullAnnot, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
    xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot afull volcano") +
    theme(axis.title=element_text(size=5), title = element_text(size=7)) #+ xlim(-50,30) + ylim(0,25) 
  ggsave(paste('volc',contrastList[i],'ggplot_full.png', sep='_'),plot = ggplot_full, width = 7, height = 7,units = c("cm"))
  
  res_above10 <- as.data.frame(res_above10)
  res_above5 <- as.data.frame(res_above5)
  ggplot_above10<- ggplot(res_above10, aes(x=log2FoldChange, y=-log10(pvalue))) +
    geom_point(data = subset(res_above10, padj > 0.05), color = "black",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
    xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot above 10 basemean volcano") +
    theme(axis.title=element_text(size=5), title = element_text(size=7)) #+ xlim(-6,6) + ylim(0,10)
  ggsave(paste('volc_above10',contrastList[i],'ggplot.png', sep='_'),plot = ggplot_above10, width = 7, height = 7,units = c("cm"))
  
  ggplot_above5<- ggplot(res_above5, aes(x=log2FoldChange, y=-log10(pvalue))) +
    geom_point(data = subset(res_above5, padj > 0.05), color = "black",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
    xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot above 5 basemean volcano") +
    theme(axis.title=element_text(size=5), title = element_text(size=7)) #+ xlim(-6,6) + ylim(0,10)
  ggsave(paste('volc_above5',contrastList[i],'ggplot.png', sep='_'),plot = ggplot_above5, width = 7, height = 7,units = c("cm"))
  
   ggplot_above10_labs<- ggplot(res_above10, aes(x=log2FoldChange, y=-log10(pvalue))) +
     geom_point(data = subset(res_above10, padj > 0.05), color = "black",size = 0.3,shape = 16) +
     geom_point(data = subset(res_above10, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
     geom_point(data = subset(res_above10, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
     geom_point(data = subset(res_above10, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
     xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot above 10 basemean volcano") +
     theme(axis.title=element_text(size=5), title = element_text(size=7)) + #xlim(-10,10) + ylim(0,10) +
     geom_text(aes(label=ifelse(padj <= 0.05 & abs(log2FoldChange) >= 1,external_gene_name,"")), color="black", size=1, vjust=0, hjust=-0.1)
   ggsave(paste('volc_above10',contrastList[i],'ggplot_withLabels.png', sep='_'),plot = ggplot_above10_labs, width = 7, height = 7,units = c("cm"))
  
  top10 <- res_above10[1:10,]
  ggplot_above10_labs2<- ggplot(res_above10, aes(x=log2FoldChange, y=-log10(pvalue))) +
    geom_point(data = subset(res_above10, padj > 0.05), color = "black",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above10, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
    xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot above 10 basemean volcano") +
    theme(axis.title=element_text(size=5), title = element_text(size=7)) + #xlim(-6,6) + ylim(0,10) +
    geom_text(aes(label=ifelse(rownames(res_above10)%in%rownames(top10),external_gene_name,"")), color="black", size=1, vjust=0, hjust=-0.1)
  ggsave(paste('volc_above10',contrastList[i],'ggplot_withLabels2.png', sep='_'),plot = ggplot_above10_labs2, width = 7, height = 7,units = c("cm"))
  
  top10_1 <- res_above5[1:10,]
  ggplot_above5_labs2<- ggplot(res_above5, aes(x=log2FoldChange, y=-log10(pvalue))) +
    geom_point(data = subset(res_above5, padj > 0.05), color = "black",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, padj <= 0.05), color = "blue",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, abs(log2FoldChange) >= 1), color = "dark green",size = 0.3,shape = 16) +
    geom_point(data = subset(res_above5, padj <= 0.05 & abs(log2FoldChange) >= 1), color = "red",size = 0.3, shape = 16) +
    xlab("Fold change (log2)") + ylab("-log10(P.Value)") + ggtitle(label = paste(contrastList[i]),subtitle = "ggplot above 5 basemean volcano") +
    theme(axis.title=element_text(size=5), title = element_text(size=7)) + #xlim(-6,6) + ylim(0,10) +
    geom_text(aes(label=ifelse(rownames(res_above5)%in%rownames(top10_1),external_gene_name,"")), color="black", size=1, vjust=0, hjust=-0.1)
  ggsave(paste('volc_above5',contrastList[i],'ggplot_withLabels2.png', sep='_'),plot = ggplot_above5_labs2, width = 7, height = 7,units = c("cm"))
  
}  
  
##variance stabilizing transformations ------------
vsd <- varianceStabilizingTransformation(ddsHTSeq, blind=FALSE) #preforme trnsformation 
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, batch = vsd$Sepsis, batch2 = vsd$RIN) #correction of BOTH
assay(vsd) <- mat

mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, batch = vsd$Batch) #correction of BOTH
assay(vsd) <- mat

#plot PCA VST
png("pca_vsd_Diag_withLabels.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))+
  geom_text(aes(label=sampleTable$sampleName),hjust=0, vjust=0)
dev.off()

png("pca_vsd_Diag.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

png("pca_vsd_corr_DiagBraaklb.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("BraakLB", "Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = BraakLB, shape = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

png("pca_vsd_corr_BrakkBraaklb.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("Braak", "BraakLB"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = BraakLB, shape = Braak )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

png("pca_vsd_corr_ApoEBraaklb.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("ApoE", "BraakLB"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = BraakLB, shape = ApoE )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

png("pca_vsd_corr_DiagApoE.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd, intgroup = c("ApoE", "Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = ApoE, shape = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

pcaData <- plotPCA(vsd, intgroup = c("Age", "Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = Age, shape = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))

## rlog transformation ---------
rlg <- rlogTransformation(ddsHTSeq, blind=FALSE)
mat <- assay(rlg)
mat <- limma::removeBatchEffect(mat, batch = rlg$RIN, batch2 = rlg$Sepsis) 
assay(rlg) <- mat

mat <- assay(rlg)
mat <- limma::removeBatchEffect(mat, batch = rlg$Batch) 
assay(rlg) <- mat

png("pca_rlog_corr_Diag.png", 500, 500, pointsize=20)
pcaData <- plotPCA(rlg, intgroup = c("Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, shape = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()

png("pca_rlg_corr_DiagBraakLB.png", 500, 500, pointsize=20)
pcaData <- plotPCA(rlg, intgroup = c("Diagnosis","BraakLB"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, shape = Diagnosis, color = BraakLB)) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) + xlim(-20,30) + 
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  geom_text(aes(label=sampleTable$sampleName),hjust=0, vjust=0)
dev.off()

sampleDists <- dist(t(assay(rlg)))
library("RColorBrewer")
library("pheatmap")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rlg$Diagnosis, rlg$Patients)
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)

### heatmaps ----------
library("RColorBrewer")
library("pheatmap")
library("gplots")
library("genefilter")

#Heatmap of countmatrix
# this gives log2(n + 1)
ntd <- normTransform(ddsHTSeq)
library("vsn")
library("hexbin")

png("qc-meanSdPlot-ntd.png", 800, 800, pointsize=20)
meanSdPlot(assay(ntd))
dev.off()
png("qc-meanSdPlot-vsd.png", 800, 800, pointsize=20)
meanSdPlot(assay(vsd))
dev.off()
png("qc-meanSdPlot-rlg.png", 800, 800, pointsize=20)
meanSdPlot(assay(rlg))
dev.off()

select <- order(rowMeans(counts(ddsHTSeq,normalized=TRUE)), decreasing=TRUE)[1:20]
df <- as.data.frame(colData(ddsHTSeq)[,c("Diagnosis","BraakLB")])
png("heatmap_ddsHTSeq.png", 1000, 1000, pointsize=20)
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
         cluster_cols=FALSE, annotation_col=df)
dev.off()
##Heatmap with gene clustering
#choose top 50 genes with the biggest variance
topVarGenes <- head( order( rowVars( assay(rlg) ), decreasing=TRUE ), 50 )
#identify genes
topVarGenes_list <- assay(rlg)[ topVarGenes, ]
topVarGenes_list <- row.names(topVarGenes_list)
topVarGenes_annot <- countsnorm_DF[intersect(rownames(countsnorm_DF), topVarGenes_list), ]
write.csv(topVarGenes_annot, "topVarGenes_rlg50_annotCounts.csv")

#plot heatmap
png("heatmap_rlg_corr_geneCluster.png", 1800, 1800, pointsize=26)
heatmap.2( assay(rlg)[ topVarGenes, ], scale="row", labCol = paste(colnames(rlg),rlg$Diagnosis,sep="-"),
           trace="none", dendrogram="column",labRow = paste(rownames(rlg),topVarGenes_annot$external_gene_name,sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

#choose top 50 genes with the biggest variance
topVarGenes <- head( order( rowVars( assay(vsd) ), decreasing=TRUE ), 50 )
topVarGenes_100 <- head( order( rowVars( assay(vsd) ), decreasing=TRUE ), 100 )
#identify genes
topVarGenes_list <- assay(vsd)[ topVarGenes, ]
topVarGenes_list <- row.names(topVarGenes_list)
topVarGenes_annot <- countsnorm_DF[intersect(rownames(countsnorm_DF), topVarGenes_list), ]

topVarGenes_list_100 <- assay(vsd)[ topVarGenes_100, ]
topVarGenes_list_100 <- row.names(topVarGenes_list_100)
topVarGenes_annot_100 <- countsnorm_DF[intersect(rownames(countsnorm_DF), topVarGenes_list), ]
write.csv(topVarGenes_annot_100, "topVarGenes_vsd100_annotCounts.csv")

#plot heatmap
png("heatmap_vsd_corr_geneCluster.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[ topVarGenes, ], scale="row", labCol =  paste(colnames(vsd),vsd$Diagnosis,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarGenes_annot$external_gene_name, sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

png("heatmap_vsd_corr_geneCluster_100.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[ topVarGenes_100, ], scale="row", labCol =  paste(colnames(vsd),vsd$Diagnosis,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarGenes_annot_100$external_gene_name, sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

#Heatmap of Euclidean sample distances after rlog transformation
png("heatmap_rlg_corr_sampleEucDist.png", 800, 800, pointsize=20)
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rlg$Diagnosis, rlg$Patients, sep="-" )
colnames(sampleDistMatrix) <- NULL
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
dev.off()

png("heatmap_vsd_corr_sampleEucDist.png", 800, 800, pointsize=20)
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$Diagnosis, vsd$Patients, sep="-" )
colnames(sampleDistMatrix) <- NULL
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
dev.off()


###check stuff about the lncRNAS ----------------------
##read in lncRNAs list
#lncRNAs <- read.csv("C:/Users/User/Documents/HUJI/????/Parkinson/new_analysis_290320/gene lists/lncipedia_lncRNA_list.csv")

#create lncRNAs dataset
MylncRNAs <- countsnorm_DF[which(countsnorm_DF$gene_biotype == "lncRNA"), ]
dim(MylncRNAs)
write.csv(MylncRNAs, "MylncRNAs_countsnorm_anot.csv")

#choose top 50 genes with the biggest variance
topVarlncRNAs <- head(order(rowVars(assay(vsd)[intersect(rownames(assay(vsd)),rownames(MylncRNAs)), ]), decreasing=TRUE), 50)
#identify genes
topVarlncRNAs_list <- assay(vsd)[topVarlncRNAs, ]
dim(topVarlncRNAs_list)
topVarlncRNAs_list <- row.names(topVarlncRNAs_list)
topVarlncRNAs_annot <- countsnorm_DF[intersect(rownames(countsnorm_DF), topVarlncRNAs_list), ]
write.csv(topVarlncRNAs_annot, "topVarlncRNAs_vsd100_annotCounts.csv")

#plot heatmap
png("heatmap_vsd_lncRNA_corr_geneCluster.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[ topVarlncRNAs, ], scale="row", labCol = paste(colnames(vsd),vsd$PD,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarlncRNAs_annot$external_gene_name,sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

##vst above 10 base mean ------------
#create lncRNAs dataset
above10 <- countsnorm_DF
above10$rowmean <- rowMeans(above10[ , 1:31])
above10 <- countsnorm_DF[which(above10$rowmean >= 10), ]
dim(above10) # 25972    40
write.csv(above10, "above10_countsnorm_anot.csv")

#choose top 50 genes with the biggest variance
topVarGenes_above10 <- head(order(rowVars(assay(vsd)[intersect(rownames(assay(vsd)),rownames(above10)), ]), decreasing=TRUE), 50)
#identify genes
topVarGenes_above10_list <- assay(vsd)[topVarGenes_above10, ]
dim(topVarGenes_above10_list)
topVarGenes_above10_list <- row.names(topVarGenes_above10_list)
topVarGenes_above10_annot <- above10[intersect(rownames(above10), topVarGenes_above10_list), ]

#plot heatmap
png("heatmap_vsd_above10_corr_geneCluster.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[topVarGenes_above10, ], scale="row", labCol =  paste(colnames(vsd),vsd$PD,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarGenes_above10_annot$external_gene_name,sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

topVarGenes_100_above10 <- head(order(rowVars(assay(vsd)[intersect(rownames(assay(vsd)),rownames(above10)), ]), decreasing=TRUE), 100)
#identify genes
topVarGenes_above10_list_100 <- assay(vsd)[topVarGenes_100_above10, ]
dim(topVarGenes_above10_list_100)
topVarGenes_above10_list_100 <- row.names(topVarGenes_above10_list_100)
topVarGenes_above10_annot_100 <- above10[intersect(rownames(above10), topVarGenes_above10_list_100), ]
dim(topVarGenes_above10_annot_100)
write.csv(topVarGenes_above10_annot_100, "topVarGenes_above10_annotCounts_100.csv")
#plot heatmap
png("heatmap_vsd_above10_corr_geneCluster_100.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[topVarGenes_100_above10, ], scale="row", labCol =  paste(colnames(vsd),vsd$PD,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarGenes_above10_annot_100$external_gene_name,sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

##vst only upregulated DPDvsNDPD trans ------------
#create  dataset
listUP <- res_DPDvsNDPD_Ordered[which(res_DPDvsNDPD_Ordered$log2FoldChange>0),]
upDPDvsNDPD <- countsnorm_DF[intersect(rownames(countsnorm_DF),rownames(listUP)), ]
dim(upDPDvsNDPD) # 40202    40
write.csv(upDPDvsNDPD, "upDPDvsNDPD_countsnorm_anot.csv")

#choose top 50 genes with the biggest variance
topVarGenes_upDPDvsNDPD <- head(order(rowVars(assay(vsd)[intersect(rownames(assay(vsd)),rownames(upDPDvsNDPD)), ]), decreasing=TRUE), 50)
#identify genes
topVarGenes_upDPDvsNDPD_list <- assay(vsd)[topVarGenes_upDPDvsNDPD, ]
dim(topVarGenes_upDPDvsNDPD_list)
topVarGenes_upDPDvsNDPD_list <- row.names(topVarGenes_upDPDvsNDPD_list)
topVarGenes_upDPDvsNDPD_annot <- upDPDvsNDPD[intersect(rownames(upDPDvsNDPD), topVarGenes_upDPDvsNDPD_list), ]

#plot heatmap
png("heatmap_vsd_upDPDvsNDPD_corr_geneCluster.png", 1800, 1800, pointsize=26)
heatmap.2( assay(vsd)[topVarGenes_upDPDvsNDPD, ], scale="row", labCol =  paste(colnames(vsd),vsd$PD,vsd$Sepsis,sep="-"), 
           trace="none", dendrogram="column",labRow = paste(rownames(vsd),topVarGenes_upDPDvsNDPD_annot$external_gene_name,sep="-"),
           col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
           cexRow=0.9, margins=c(7,16))
dev.off()

#plot PCA VST
vsd_upDPDvsNDPD <- vsd[intersect(rownames(vsd),rownames(listUP)), ]
png("pca_vsd_upDPDvsNDPD_Diag.png", 500, 500, pointsize=20)
pcaData <- plotPCA(vsd_upDPDvsNDPD, intgroup = c("Diagnosis"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = Diagnosis )) +
  geom_point(size=3) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
dev.off()
